/// \mainpage
/// NiCMidi is a MIDI library written in C++ by Nicola Cassetta, which implements objects for playing, recording, editing and saving MIDI content. It was originally a fork of jdkmidi, an old similar library written by J. D. Koftinoff and no more updated (see https://github.com/jdkoftinoff/jdksmidi). The author has rewritten the old code, adding many new features and using a more modern C++ style.
///
/// You can start learning it by reading the \ref OVERVIEW section.
///


/// \page OVERVIEW Overview
///
/// Getting started with NiCMidi.
///
/// + \subpage LOAD_PLAY
/// + \subpage MESS_TRACK_MULTI
/// + \subpage HOW_PLAYS
/// + \subpage RECORDING
/// + \subpage NUMBERING
/// + \subpage PROCESSORS
/// + \subpage NOTIFIERS
/// + \subpage OTHER_MIDITICKS
///


/// \page LOAD_PLAY Loading and playing MIDI files
///
/// If you only want to load and play MIDI files you can use the AdvancedSequencer class. It is an all-in-one object easy to use and with all the common features of a sequencer. These include:
/// + Loading MIDI files
/// + Playing and stopping the file at any time
/// + Jumping from a time to another, even when playing
/// + Muting, soloing, transposing, velocity scaling for individual tracks
/// + MIDI out port assign and time shifting for individual tracks
/// + Global tempo scaling
/// + Embeds a MIDIThru object, so you can play along with the sequencer
///
/// Here is a simple example of its usage:
/// \code
///#include "advancedsequencer.h"
///#include "timer.h"                      // for Wait()
///
///int main() {
///   AdvancedSequencer seq;               // creates the AdvancedSequencer
///   seq.Load("twinkle.mid");             // loads a MIDI file into it
///   seq.Play();                          // plays the file
///   while (seq.IsPlaying())              // waits until the end (the sequencer auto stops)
///      MIDITimer::Wait(10);              // 10 msecs
///   return 0;
///}
/// \endcode
///
/// Here is a more complex example using some of the class features (in a real environment you could do these commands interactively) while the sequencer is playing:
///
/// \code
///#include "advancedsequencer.h"
///#include "timer.h"                      // for Wait()
///
///int main() {
///   AdvancedSequencer seq;               // creates the AdvancedSequencer
///   seq.Load("twinkle.mid");             // loads a MIDI file into it
///   seq.Play();                          // plays the file
///   while(seq.GetCurrentMeasure() < 4)   // waits until measure 4
///      MIDITimer::Wait(10);              // 10 msecs
///   seq.SetTrackTranspose(1, 12);        // transposes track 1 by one octave up
///   while(seq.GetCurrentMeasure() < 8)
///      MIDITimer::Wait(10);
///   seq.SetTrackMute(1, true);	       // mutes track 1
///   while(seq.GetCurrentMeasure() < 12)
///      MIDITimer::Wait(10);
///   seq.SetTrackSolo(2);                 // soloes track 2 ...
///   seq.SetTempoScale(200);              // ... and doubles the tempo
///   while(seq.IsPlaying()                // waits until the end
///      MIDITimer::Wait(10);
///   return 0;
///}
/// \endcode
///
/// You can see two more elaborated examples that let you interact with the class:
/// + \ref test_advancedsequencer.cpp command line based, for all platforms, demonstrates all the main features of the class.
/// + \ref test_win32_player.cpp GUI based, for Windows only, demonstrates the use of a MIDISequencerGUINotifier and a SMPTE together with the AdvancedSequencer.
///


/// \page MESS_TRACK_MULTI MIDI messages, tracks and multitracks
///
/// Let's examine how NiCMidi stores and manipulates the MIDI content.
///
/// The %MIDIMessage and %MIDITimedMessage classes
/// ----------------------------------------------
///
/// According to the MIDI standard, a MIDI message is a group of bytes containing musical data: the first is the **status byte**, giving information on what type of message it is, and the others are the data bytes (only real-time MIDI messages consists of an unique byte). Moreover, MIDI System Exclusive (SysEx) messages can be followed by an undefined number of bytes allowing, for example, the dumping of voice data from a machine to another. You should be familiar with the various types of messages and their codify in hexadecimal values.
///
/// The MIDIMessage class allows you to create, edit or inspect MIDI messages without worrying about hexadecimal values: it consists of a status byte, three data bytes for MIDI data, and a pointer to a MIDISystemExclusive object (a buffer that can store any amount of bytes), with lots of methods for setting and inspecting data. The constructor creates an empty (NoOp) message; you must then set its status and data with the class methods.
///
/// Here is a simple example of its usage:
/// \code
///#include "msg.h"
///
///int main() {
///   MIDIMessage msg1, msg2, msg3;     // creates three empty MIDIMessage objects
///   msg1.SetNoteOn(0, 60, 100);       // msg1 becomes a Note On, channel 1, note 60, velocity 100
///   msg2.SetVolumeChange(0, 127);     // msg2 becomes a Volume Change (CC 7), channel 1, volume 127
///   msg3.SetTimeSig(4, 4);            // msg 3 becomes a system Time Signature, 4/4
///   msg1.SetChannel(msg1.GetChannel() + 1);
///                                     // increments the msg1 channel by one
///   msg2.SetControllerValue(msg2.GetControllerValue() - 10);
///                                     // decrements the msg2 volume by 10
///   std::cout << msg1.MsgToText();    // prints a description of msg1
///   std::cout << msg2.MsgToText();    // prints a description of msg2
///   std::cout << msg3.MsgToText();    // prints a description of msg3
///   return 0;
///}
/// \endcode
///
/// MIDIMessage objects can be sent to an hardware MIDI port by the MIDIOutDriver::OutputMessage() method (this will be treated in detail in the \ref HOW_PLAYS section).
/// \code
///#include "msg.h"
///#include "manager.h"                // includes "timer.h" and "driver.h"
///
///int main() {
///   MIDIOutDriver* port = MIDIManager::GetOutPort(0);
///                                    // gets a pointer to the driver of the 1st hardware out
///                                    // port in the system
///   port->OpenPort();                // you must open the port before sending MIDI messages
///   MIDIMessage msg;
///   msg.SetNoteOn(0, 60, 100);       // makes msg1 a Note On message
///   port->OutputMessage(&msg1);      // outputs the message (the note should sound)
///   MIDITimer::Wait(2000);           // waits two seconds
///   msg.SetNoteOff(0, 60);           // makes msg the corresponding Note Off
///   port->OutputMessage(&msg);       // outputs the message (the note should stop)
///   port->ClosePort();               // closes the port
///   return 0;
///}
/// \endcode
///
/// The MIDITimedMessage class inherits from MIDIMessage and adds the ability to associate a MIDI time to the message, so MIDITimedMessage objects can be ordered by time and queued into a MIDI track. Time is counted in MIDI ticks (the library defines the \ref MIDIClockTime type as a typedef for **unsigned long**) and the class has methods to set, inspect, increment and decrement it. A newly created MIDITimedMessage has its time set to 0.
/// \code
///#include "msg.h"
///
///int main() {
///   MIDITimedMessage msg;
///   msg.SetNoteOn(0, 60, 100);       // makes msg1 a Note On message
///   msg.SetTime(480);                // sets its time (in MIDI ticks)
///   msg.AddTime(960);                // adds 960 ticks
///   msg.SubTime(240);                // subtracts 240 ticks
///   std::cout << msg.MsgToText();    // prints a description of msg
///   return 0;
///}
/// \endcode
///
/// The %MIDITrack class
/// --------------------
///
/// The MIDITrack is basically a stl::vector of MIDITimedMessage objects, ordered by time. It has methods for editing the track adding, deleting and examining messages. Due to the SMF format a MIDITrack always contains almost a message, the system End of Data (or End of Track, EOT), as last message. This is automatically handled by the library, and the user cannot insert or delete it; every time you insert a MIDITimedMessage into the track the MIDIClockTime of the EOT is examined and eventually updated.
///
/// The constructor creates an empty track, with only the EOT; you can then edit it: the MIDITrack::InsertEvent(), MIDITrack::InsertNote(), MIDITrack::DeleteEvent() and MIDITrack::DeleteNote() methods insert and delete MIDITimedMessage objects, while other methods can insert or delete entire time intervals.
///
/// Here is an example:
/// \code
///#include "track.h"
///#include "dump_tracks.h"             // contains helper functions to print track content
///
///int main() {
///   MIDITrack track;
///   MIDITimedMessage msg;             // a new MIDITimedMessage has time set to 0
///   msg.SetProgramChange(0, 49);      // msg becomes a Program Change, channel 1, program 49, time 0
///   track.InsertEvent(msg);           // inserts a copy of msg into the track
///   msg.SetVolumeChange(0, 127);      // msg becomes a Volume Change (CC 7), channel 1, volume 127, time 0
///   track.InsertEvent(msg);
///   msg.SetNoteOn(0, 60, 100);        // msg becomes a Note On, channel 1, note 60, velocity 100
///   msg3.SetTime(480);                // sets the time of msg to 480 MIDI ticks
///   track.InsertNote(msg, 240);       // inserts the Note On and the corresponding Note Off after 240 ticks
///   DumpMIDITrack(&track);            // prints the contents of the track
///   return 0;
///}
/// \endcode
///
/// MIDI standards do not specify how events with same MIDI time must be ordered, so the library uses its own comparing algorithm; if you want to know how exactly events are ordered in a track see the MIDITimedMessage::CompareEventsForInsert() method. Moreover, some kind of messages (for example two time signatures, or control change with the same control number) are usually incompatible (or useless) at the same time in the same track; I called these messages *same kind* messages. When you insert a message at the same time of an old *same kind* message you can control if the new message will replace the old or not (see the MIDITimedMessage::IsSameKind() and the static MIDITrack::SetInsertMode() for details).
///
/// The SMF format has no prescriptions on the contents of a MIDI track (for example in the SMF 0 files all messages come in a single track, while in the SMF 1 there is a master track with system events and a track for every MIDI channel); usually the MIDI messages are grouped in tracks according to their kind (tracks with only system messages, or lyrics, or channel messages...). When you load or edit a MIDITrack the library analyzes its content and classifies it into various types; you can inspect the contents of a track with the MIDITrack::GetType() method (see it for details on the various track types recognized by the library).
///
/// The %MIDIMultiTrack class
/// -------------------------
///
/// The MIDIMultiTrack is an array of MIDITrack objects to be played simultaneously; all tracks share the same \ref MIDIMultiTrack::clks_per_beat parameter (i.e\. the MIDI ticks for a quarter note) which determines the conversion between MIDI ticks and musical values. Typically track 0 is the master track, containing meta events (time and key signature, tempo ...) and other system messages, while other tracks are channel tracks, every one containing events with the same channel number (this is the standard in SMF 1 files).
///
/// The constructor creates an empty multitrack with no tracks and the MIDIMultiTrack::clks_per_beat parameter given by the **DEFAULT_CLKS_PER_BEAT** constant defined in the file midi.h (actually it is 120 ticks for a quarter note, you can change it via the MIDIMultiTrack.SetClksPerBeat() method); you can then add, delete or move tracks with the appropriate methods. Alternatively you can fill a MIDIMultiTrack with the \ref LoadMIDIFile() function, which loads the contents of a SMF into the multitrack creating the needed tracks and setting the clks_per_beats according to the file. There is also a \ref WriteMIDIFile() which saves the content of the multitrack into a SMF.
///
/// The MIDIMultiTrack alone has no playing ability, it must be embedded into a MIDITickComponent derived class (as MIDISequencer or AdvancedSequencer) which picks up its content and sends it to the MIDI ports with the appropriate timing. This will be treated in the next section.
///
///Here is an example:
/// \code
///#include "multitrack.h"
///#include "dump_tracks.h"                     // contains helper functions to print track content
///
///int main() {
///   MIDIMultiTrack multi;
///   LoadMIDIFile("twinkle.mid", &multi);      // loads a midifile into the multitrack
///   DumpAllTracks(&multi);                    // shows a dump of the content of multitrack
///   MIDITrack track(*multi.GetTrack(1));      // creates a copy of track 1
///   for (unsigned int i = 0; i < track.GetNumEvents(); i++) {
///                                             // examines all track messages
///      MIDITimedMessage msg = track.GetEvent(i);
///      if (msg.IsNote())                      // if the message is a note ...
///         msg.SetNote(msg.GetNote() + 12):    // ... transposes it up an octave
///   }
///   multi.InsertTrack(track);                 // appends the new track to the multitrack
///   DumpAllTracks(&multi);
///   return 0;
///}
/// \endcode
///
/// Editing and playing the content of a %MIDIMultiTrack
/// ----------------------------------------------------
///
/// If you want to compose your MIDI song you must create a MIDIMultiTrack and edit its tracks; while editing you will probably want to listen to your changes. The simpler way to get this is working with an AdvancedSequencer class: it infact embeds a MIDIMultiTrack for storing MIDI data, and has methods for playing its content. Here are the main tips for working in this way.
/// + The AdvancedSequencer(MIDISequencerGUINotifier*) constructor creates an instance with an embedded 17-tracks multitrack (track 0 is intended to be the master track while tracks 1-16 are the channel tracks). The multitrack is initially empty and in this case it is owned by the sequencer (will be deleted if you delete the sequencer instance). For the parameter see \ref NOTIFIERS.
/// + There is another constructor, the AdvancedSequencer(MIDIMultiTrack*, MIDISequencerGUINotifier*) which creates an instance embedding a multitrack given by the user; in this case the multitrack is not owned and you are responsible for deleting it.
/// + There are also two ways to load the embedded multitrack: the method AdvancedSequencer::Load(const char*) loads a MIDI file into it, while the AdvancedSequencer::Load(const MIDIMultiTrack*) copies the content of the given multitrack into the sequencer multitrack. In both cases the number of tracks and the timing parameter(MIDIMultiTrack::clks_per_beat) are adjusted and the old sequencer contents are deleted.
/// + You can get a pointer to the embedded multitrack with the AdvancedSequencer::GetMultiTrack() method.
///
/// Once got the pointer you can start to edit the MIDIMultiTrack with its methods; this causes however its content to go out-of-sync with other internal sequencer parameters. All goes OK if you follow these simple rules:
/// + If you only add or delete events you must call, **before playing or jumping from one time to another**, the AdvancedSequencer::UpdateStatus() method which resynchronizes the most common parameters.
/// + If you want to add, delete or move tracks you **must not use the %MIDIMultiTrack methods**, but the (inherited) MIDISequencer::InsertTrack(), MIDISequencer::DeleteTrack() and MIDISequencer::MoveTrack(). This is because the sequencer has internal arrays holding data for port, time shift, processors for every track, and these array must be updated  accordingly.
/// + If you make more drastic changes (as copying another MIDIMultiTrack into it) and don't know the actual number of tracks you must use the AdvancedSequencer::Load() or AdvancedSequencer::Reset() methods: these however reset also the processors, port assign and time shift (the sequencer could not guess the correspondence between old values and new).
///
/// You can see some example of the use of the AdvancedSequencer and MIDIMultiTrack here:
/// + \ref test_writefile.cpp : an example demonstrating how to edit the %MIDIMultiTrack embedded in the AdvancedSequencer, play its content and then save it in a MIDI file.
/// + \ref test_stepsequencer.cpp : a more complicate (and NOT comfortable!) command line step sequencer


/// \page HOW_PLAYS How NiCMidi plays MIDI
///
/// If we want to play the contents of a MIDIMultiTrack we must send them to an hardware MIDI port with accurate timing. As said in previous sections, this can easily be done by the AdvancedSequencer object. This section is a more in-depth examination of how this is done by mean of some library classes.
///
/// The %MIDITimer class
/// --------------------
///
/// The MIDITimer is a static class that provides MIDI timing. This is accomplished by starting a background thread that calls a user-defined callback function at a regular rate. The timing is provided by the C++ <std::chrono> classes, so you need to compile the library according to (at least) the C++ 0x11 standard; the default temporal resolution is 10 msecs, but you can change it with the MIDITimer::SetResolution() method.
///
/// When playing MIDI, the timer is usually controlled by the MIDIManager class (described later), so it is rarely necessary to use its methods directly. You may find useful its MIDITimer::Wait() method (which waits a certain number of milliseconds) or the MIDITimer::GetSysTimeMs() method (which returns the absolute time in milliseconds from the class instantiation).
///
/// The %MIDIOutDriver and %MIDIInDriver classes
/// --------------------------------------------
///
/// The MIDIOutDriver and MIDIInDriver classes are objects which communicate between the library software and the hardware MIDI ports regardless the underlying OS; NiCMidi uses the RTMidi library of Gary Scavone (see http://www.music.mcgill.ca/~gary/rtmidi/) to have a common interface for all OS. Every port has an Id number and a readable name (given by the OS).
///
///If you want to send (or receive) MIDI messages to (from) a port you must open it with the MIDIOutDriver::OpenPort() or MIDIInDriver::OpenPort() methods. The %MIDIOutDriver has a method MIDIOutDriver::OutputMessage() which sends a MIDITimedMessage to the port; the %MIDIInDriver is a bit more complicated, because it manages a queue for incoming messages, and you have various methods for inspecting them (see the class documentation for details).
///
/// However, when using the high-level objects of the library (such as AdvancedSequencer, MIDISequencer, MIDIRecorder, etc.), all the work (opening and closing doors, sending/receiving messages ...) is done by these classes, so even in this case the user rarely needs to use the methods of this class directly.
///
/// The %MIDIManager class
/// ----------------------
///
/// The MIDIManager is a static class that handles the temporized communications between the software and the hardware MIDI ports.
/// + **Ports**: when the manager is instantiated it enumerates all the hardware ports, then creates a MIDIOutDriver for each out port and a MIDIInDriver for each in port; you can get the ports id, their name and a pointer to their driver via static class methods. Here is an example which enumerates the MIDI ports on your system.
/// \code
///#include "manager.h"
///#include <iostream>
///
///int main() {
///   std::cout << "YOUR MIDI OUT PORTS" << std::endl;
///   for(unsigned int i = 0, i < MIDIManager::GetNumMIDIOuts(), i++)
///      std:cout << "Port " << i << ": " << MIDIManager::GetMIDIOutName(i) << std::endl;
///   std::cout << "YOUR MIDI IN PORTS" << std::endl;
///   for(unsigned int i = 0, i < MIDIManager::GetNumMIDIIns(), i++)
///      std:cout << "Port " << i << ": " << MIDIManager::GetMIDIInName() << std::endl;
///   return 0;
///}
/// \endcode
///
/// + **Timing**: The manager takes the control of the (also static) MIDITimer, redirecting its background thread to call the static method MIDIManager::TickProc() at every timer tick.
///
/// + **Communications with other classes**: The MIDIManager handles a queue of MIDITickComponent objects (i.e. objects "which have a callback", see below): you can insert a pointer to such an object in the queue with the MIDIManager::AddMIDITick() method and remove it with MIDIManager::RemoveMIDITick(). The MIDIManager::TickProc() (which is called at every timer tick) calls in turn all the callbacks of the queued objects, giving them the absolute time as parameter. So every MIDITickComponent object can perform its tasks with accurate timing. This is a sketch of MIDIManager calling mechanism:
/// \image html "MIDIManager.png"
///
/// This modular design allows the user to stack many components which all share the same timing (for example a sequencer, a metronome, a recorder ...) and encourages him to develop its own objects.
///
/// The %MIDITickComponent class
/// ----------------------------
///
/// The core of MIDI timed playback is the pure virtual MIDITickComponent class: this is the prototype for all objects that have a callback procedure to be called at every tick of the MIDITimer; the AdvancedSequencer, MIDISequencer, MIDIThru, Metronome and MIDIRecorder classes all inherit from it. Let us analyze its most important methods:
/// + The constructor MIDITickComponent::MIDITickComponent(tPriority pr, MIDITick func) must be called by your subclass constructor. See its documentation for details on the parameters. Once the component ha been created, it must be  added to the %MIDIManager queue with the MIDIManager::AddMIDITick() method to make it effective.
/// + The destructor MIDITickComponent::~MIDITickComponent() removes the component from the %MIDIManager queue in order to prevent the use of an invalid pointer, so you do not need to call MIDIManager::RemoveMIDITick() by yourself.
/// + The MIDITickComponent::Start() method enables the callback. Moreover, it initialize the internal parameter MIDITickComponent::sys_time_offset to the start time, so every subsequent call of the callback can perform time calculations. You may want to redefine it in your subclass in order to initialize your component at start (for example, in the derived classes of the library it opens the appropriate MIDI ports).
/// + The MIDITickComponent::Stop() method disables the callback (again, you can redefine it if you want to perform ending operations).
///
/// Due to the difficulty of calling member functions as callbacks in C++ this class actually needs two methods (one static and one member) to implement the callback mechanism:
/// + The static MIDITickComponent::StaticTickProc(tMsecs sys_time, void* p) is called by the MIDIManager, getting as parameters the absolute system time and the **this** pointer of the class instance as a void. This does nothing in the base class, and you must redefine it in your subclass. It only should cast the pointer to point to the derived class and then call the (virtual) member callback. For example:
/// \code
///
///void MyClass::StaticTickProc(tMsecs sys_time, void* p) {
///   MyClass* my_pt = static_cast<MyClass*>(p);
///   my_pt->TickProc(sys_time);
///}
///
/// \endcode
///
/// + The member MIDITickComponent::TickProc(tMsecs sys_time) is pure virtual in the base class: you must implement it and do  all your work here. You can know the number of msecs elapsed from the Start() call with sys_time - sys_time_offset and use it to perform time calculations and send, receive or manipulate MIDI messages with accurate timing.
///
/// We repeat that if you want to use a MIDITickComponent you must first add it to the manager queue, then you can call its methods Start() and Stop() for enabling/disabling the callback. This is an example of the usage of the Metronome:
/// \code
///#include "metronome.h"
///#include "manager.h"
///
///int main() {
///   Metronome metro;                   // creates the metronome
///   MIDIManager::AddMIDITick(&metro);  // adds it to the MIDIManager queue
///   metro.SetTempo(100);               // sets the musical tempo
///   metro.Start();
///   MIDITimer::Wait(10000);            // waits 10 seconds
///   metro.Stop();
///}
/// \endcode
///
/// The %AdvancedSequencer class
/// ----------------------------
///
/// The AdvancedSequencer class inherits from MIDITickComponent, but has some special features.
/// + It automatically adds itself to the MIDIManager queue in the constructor, so it is ready to play when created.
/// + Its Start() method is aliased with Play(), following the ordinary naming conventions in a sequencer.
///
/// More detailed examples of the usage of the derived classes are  in the following files:
/// + \ref test_thru.cpp (use of MIDIThru)
/// + \ref test_metronome.cpp (use of Metronome)
/// + \ref test_sequencer.cpp (use of MIDISequencer)
/// + \ref test_component.cpp shows a simple example of subclass.
///




